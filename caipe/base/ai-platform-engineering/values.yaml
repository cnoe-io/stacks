# Override values for idpbuilder local deployment
# Global configuration shared across all subcharts
global:
  slim:
    enabled: false

  externalSecrets:
    enabled: true
    secretStoreRef:
      name: "vault-secret-store"
      kind: ClusterSecretStore

  agentSecrets:
    create: true

  llmSecrets:
    create: false
    secretName: "llm-secret"
    externalSecrets:
      secretStoreRef:
        name: "vault-eticloud"
        kind: ClusterSecretStore
      data:
      - secretKey: LLM_PROVIDER
        remoteRef:
          key: secret/ai-platform-engineering/global
          property: LLM_PROVIDER
      - secretKey: AZURE_OPENAI_API_KEY
        remoteRef:
          key: secret/ai-platform-engineering/global
          property: AZURE_OPENAI_API_KEY
      - secretKey: AZURE_OPENAI_ENDPOINT
        remoteRef:
          key: secret/ai-platform-engineering/global
          property: AZURE_OPENAI_ENDPOINT
      - secretKey: AZURE_OPENAI_API_VERSION
        remoteRef:
          key: secret/ai-platform-engineering/global
          property: AZURE_OPENAI_API_VERSION
      - secretKey: OPENAI_API_VERSION
        remoteRef:
          conversionStrategy: Default
          decodingStrategy: None
          key: secret/ai-platform-engineering/global
          property: AZURE_OPENAI_API_VERSION
      - secretKey: AZURE_OPENAI_DEPLOYMENT
        remoteRef:
          key: secret/ai-platform-engineering/global
          property: AZURE_OPENAI_DEPLOYMENT

supervisor-agent:
  nameOverride: "supervisor-agent"
  image:
    repository: "ghcr.io/cnoe-io/ai-platform-engineering"
    tag: "latest"
  env:
    EXTERNAL_URL: "https://cnoe.localtest.me:8443/ai-platform-engineering"
    RAG_AGENT_PORT: 8099
agent-argocd:
  nameOverride: "agent-argocd"
  image:
    repository: "ghcr.io/cnoe-io/agent-argocd"
    tag: "latest"
    pullPolicy: "Always"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-argocd"
      tag: "latest"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000
  agentSecrets:
    secretName: "agent-argocd-secret"
    externalSecrets:
      data:
      - secretKey: ARGOCD_TOKEN
        remoteRef:
          key: secret/ai-platform-engineering/argocd-secret
          property: ARGOCD_TOKEN
      - secretKey: ARGOCD_API_URL
        remoteRef:
          key: secret/ai-platform-engineering/argocd-secret
          property: ARGOCD_API_URL
      - secretKey: ARGOCD_VERIFY_SSL
        remoteRef:
          key: secret/ai-platform-engineering/argocd-secret
          property: ARGOCD_VERIFY_SSL

agent-aws:
  nameOverride: "agent-aws"
  image:
    repository: "ghcr.io/cnoe-io/agent-aws"
    pullPolicy: "Always"
    tag: "latest"
  mcp:
    mode: "stdio" # Options: stdio, http
    # image: # HOT FIX: will be modified in the helm chart itself in the future
    #   repository: "public.ecr.aws/awslabs-mcp/awslabs/eks-mcp-server"
    #   tag: "sha-e18497bbc401f08334ea8b966db1f235b647bfed"
  agentSecrets:
    secretName: "agent-aws-secret"
    externalSecrets:
      data:
      - secretKey: AWS_ACCESS_KEY_ID
        remoteRef:
          key: secret/ai-platform-engineering/aws-secret
          property: AWS_ACCESS_KEY_ID
      - secretKey: AWS_SECRET_ACCESS_KEY
        remoteRef:
          key: secret/ai-platform-engineering/aws-secret
          property: AWS_SECRET_ACCESS_KEY
      - secretKey: AWS_REGION
        remoteRef:
          key: secret/ai-platform-engineering/aws-secret
          property: AWS_REGION

agent-backstage:
  nameOverride: "agent-backstage"
  image:
    repository: "ghcr.io/cnoe-io/agent-backstage"
    pullPolicy: "Always"
    tag: "latest"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-backstage"
      tag: "latest"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000
  agentSecrets:
    secretName: "agent-backstage-secret"
    externalSecrets:
      data:
      - secretKey: BACKSTAGE_API_TOKEN
        remoteRef:
          key: secret/ai-platform-engineering/backstage-secret
          property: BACKSTAGE_API_TOKEN
      - secretKey: BACKSTAGE_URL
        remoteRef:
          key: secret/ai-platform-engineering/backstage-secret
          property: BACKSTAGE_URL

agent-confluence:
  nameOverride: "agent-confluence"
  image:
    repository: "ghcr.io/cnoe-io/agent-confluence"
    pullPolicy: "Always"
    tag: "latest"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-confluence"
      tag: "latest"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000
  agentSecrets:
    secretName: "agent-confluence-secret"
    externalSecrets:
      data:
      - secretKey: ATLASSIAN_TOKEN
        remoteRef:
          key: secret/ai-platform-engineering/confluence-secret
          property: ATLASSIAN_TOKEN
      - secretKey: ATLASSIAN_EMAIL
        remoteRef:
          key: secret/ai-platform-engineering/confluence-secret
          property: ATLASSIAN_EMAIL
      - secretKey: CONFLUENCE_API_URL
        remoteRef:
          key: secret/ai-platform-engineering/confluence-secret
          property: CONFLUENCE_API_URL

agent-github:
  nameOverride: "agent-github"
  image:
    repository: "ghcr.io/cnoe-io/agent-github"
    pullPolicy: "Always"
    tag: "latest"
  mcp:
    useRemoteMcpServer: true
  agentSecrets:
    secretName: "agent-github-secret"
    externalSecrets:
      data:
      - secretKey: GITHUB_PERSONAL_ACCESS_TOKEN
        remoteRef:
          key: secret/ai-platform-engineering/github-secret
          property: GITHUB_PERSONAL_ACCESS_TOKEN

agent-jira:
  nameOverride: "agent-jira"
  image:
    repository: "ghcr.io/cnoe-io/agent-jira"
    pullPolicy: "Always"
    tag: "latest"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-jira"
      tag: "latest"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000
  agentSecrets:
    secretName: "agent-jira-secret"
    externalSecrets:
      data:
      - secretKey: ATLASSIAN_TOKEN
        remoteRef:
          key: secret/ai-platform-engineering/jira-secret
          property: ATLASSIAN_TOKEN
      - secretKey: ATLASSIAN_EMAIL
        remoteRef:
          key: secret/ai-platform-engineering/jira-secret
          property: ATLASSIAN_EMAIL
      - secretKey: ATLASSIAN_API_URL
        remoteRef:
          key: secret/ai-platform-engineering/jira-secret
          property: ATLASSIAN_API_URL


agent-komodor:
  nameOverride: "agent-komodor"
  image:
    repository: "ghcr.io/cnoe-io/agent-komodor"
    pullPolicy: "Always"
    tag: "latest"
  mcp:
    image:
      tag: "latest"
  agentSecrets:
    secretName: "agent-komodor-secret"
    externalSecrets:
      data:
      - secretKey: KOMODOR_TOKEN
        remoteRef:
          key: secret/ai-platform-engineering/komodor-secret
          property: KOMODOR_TOKEN
      - secretKey: KOMODOR_API_URL
        remoteRef:
          key: secret/ai-platform-engineering/komodor-secret
          property: KOMODOR_API_URL

agent-pagerduty:
  nameOverride: "agent-pagerduty"
  image:
    repository: "ghcr.io/cnoe-io/agent-pagerduty"
    pullPolicy: "Always"
    tag: "latest"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-pagerduty"
      tag: "latest"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000
  agentSecrets:
    secretName: "agent-pagerduty-secret"
    externalSecrets:
      data:
      - secretKey: PAGERDUTY_API_KEY
        remoteRef:
          key: secret/ai-platform-engineering/pagerduty-secret
          property: PAGERDUTY_API_KEY
      - secretKey: PAGERDUTY_API_URL
        remoteRef:
          key: secret/ai-platform-engineering/pagerduty-secret
          property: PAGERDUTY_API_URL

agent-slack:
  nameOverride: "agent-slack"
  image:
    repository: "ghcr.io/cnoe-io/agent-slack"
    pullPolicy: "Always"
    tag: "latest"
  mcp:
    image:
      repository: "ghcr.io/cnoe-io/mcp-slack"
      tag: "latest"
      pullPolicy: "Always"
    mode: "http" # Options: stdio, http
    port: 8000
    pullPolicy: "Always"
  agentSecrets:
    secretName: "agent-slack-secret"
    externalSecrets:
      data:
      - secretKey: SLACK_BOT_TOKEN
        remoteRef:
          key: secret/ai-platform-engineering/slack-secret
          property: SLACK_BOT_TOKEN
      - secretKey: SLACK_APP_TOKEN
        remoteRef:
          key: secret/ai-platform-engineering/slack-secret
          property: SLACK_APP_TOKEN
      - secretKey: SLACK_SIGNING_SECRET
        remoteRef:
          key: secret/ai-platform-engineering/slack-secret
          property: SLACK_SIGNING_SECRET
      - secretKey: SLACK_CLIENT_SECRET
        remoteRef:
          key: secret/ai-platform-engineering/slack-secret
          property: SLACK_CLIENT_SECRET
      - secretKey: SLACK_TEAM_ID
        remoteRef:
          key: secret/ai-platform-engineering/slack-secret
          property: SLACK_TEAM_ID

agent-splunk:
  nameOverride: "agent-splunk"
  image:
    repository: "ghcr.io/cnoe-io/agent-splunk"
    pullPolicy: "Always"
    tag: "latest"
  mcp:
    image:
      tag: "latest"
  agentSecrets:
    secretName: "agent-splunk-secret"
    externalSecrets:
      data:
      - secretKey: SPLUNK_TOKEN
        remoteRef:
          key: secret/ai-platform-engineering/splunk-secret
          property: SPLUNK_TOKEN
      - secretKey: SPLUNK_API_URL
        remoteRef:
          key: secret/ai-platform-engineering/splunk-secret
          property: SPLUNK_API_URL

agent-webex:
  nameOverride: "agent-webex"
  image:
    repository: "ghcr.io/cnoe-io/agent-webex"
    pullPolicy: "Always"
    tag: "latest"
  mcp:
    image:
      tag: "latest"
  agentSecrets:
    secretName: "agent-webex-secret"
    externalSecrets:
      data:
      - secretKey: WEBEX_TOKEN
        remoteRef:
          key: secret/ai-platform-engineering/webex-secret
          property: WEBEX_TOKEN

rag-stack:
  rag-webui:
    ingress:
      enabled: true
      className: "nginx-internal"
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt"
      hosts:
        - host: rag-webui.dev.outshift.io
          paths:
            - path: /
              pathType: Prefix
      tls:
        - hosts:
            - rag-webui.dev.outshift.io
          secretName: rag-webui-tls
    nodeSelector:
      applications: jarvis
    tolerations:
      - key: "applications/jarvis"
        operator: "Equal"
        effect: "NoSchedule"

  milvus:
    # Only override what differs from chart defaults
    pulsarv3:
      enabled: false  # Default is true, we need false
    woodpecker:
      enabled: true   # Default is false, we need true

    # Jarvis node scheduling
    nodeSelector:
      applications: jarvis
    tolerations:
      - key: "applications/jarvis"
        operator: "Equal"
        effect: "NoSchedule"

    # Performance overrides only for compute nodes
    queryNode:
      resources:
        limits:
          cpu: 4000m
          memory: 8Gi