---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vault-config-argocd
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-config-argocd
subjects:
- kind: ServiceAccount
  name: vault-config
  namespace: vault
roleRef:
  kind: ClusterRole
  name: vault-config-argocd
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: argocd-token-sync
  namespace: vault
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  schedule: "*/10 * * * *"  # Every 10 minutes
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: vault-config
          restartPolicy: OnFailure
          containers:
          - name: argocd-token-sync
            image: docker.io/library/ubuntu:22.04
            command: ["/bin/bash", "-c"]
            args:
            - |
              #!/bin/bash
              set -ex -o pipefail

              # Install required tools
              apt-get update -qq
              apt-get install -y -qq curl netcat-openbsd wget jq libcap2-bin gnupg lsb-release

              # Install Vault CLI
              wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor > /usr/share/keyrings/hashicorp-archive-keyring.gpg
              echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com jammy main" > /etc/apt/sources.list.d/hashicorp.list
              apt-get update
              apt-get install vault -y
              setcap cap_ipc_lock= /usr/bin/vault

              # Install kubectl
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x kubectl
              mv kubectl /usr/local/bin/

              # Authenticate to Vault
              export VAULT_ADDR="http://vault:8200"
              set +x  # Disable command echoing for sensitive operations
              export VAULT_TOKEN=$(kubectl get secret vault-root-token -n vault -o jsonpath='{.data.token}' | base64 -d)
              set -x  # Re-enable command echoing

              # Wait for ArgoCD to be ready (max 5 minutes)
              echo "Waiting for ArgoCD to be ready..."
              timeout=300
              while [ $timeout -gt 0 ]; do
                if kubectl get secret -n argocd argocd-initial-admin-secret >/dev/null 2>&1; then
                  echo "ArgoCD admin secret found"
                  break
                fi
                echo "Waiting for ArgoCD admin secret... ($timeout seconds remaining)"
                sleep 10
                timeout=$((timeout - 10))
              done

              # Try to create ArgoCD API token
              ARGOCD_PASSWORD=$(kubectl get secret -n argocd argocd-initial-admin-secret -o jsonpath='{.data.password}' 2>/dev/null | base64 -d 2>/dev/null || echo "")

              if [[ -n "$ARGOCD_PASSWORD" ]]; then
                echo "Creating ArgoCD API token..."
                ARGOCD_TOKEN=$(kubectl exec -n argocd deployment/argocd-server -- sh -c "
                  argocd login localhost:8080 --username admin --password '$ARGOCD_PASSWORD' --plaintext >/dev/null 2>&1
                  argocd account generate-token --account developer --id vault-sync-$(date +%s)
                " 2>/dev/null || echo "")

                if [[ -n "$ARGOCD_TOKEN" && "$ARGOCD_TOKEN" != *"error"* ]]; then
                  vault kv put secret/ai-platform-engineering/argocd-secret \
                    ARGOCD_TOKEN="$ARGOCD_TOKEN" \
                    ARGOCD_API_URL="http://argocd-server.argocd.svc.cluster.local" \
                    ARGOCD_VERIFY_SSL="false"
                  echo "ArgoCD API token created and stored in Vault"
                else
                  echo "Failed to create ArgoCD token"
                  exit 1
                fi
              else
                echo "ArgoCD password not found"
                exit 1
              fi
