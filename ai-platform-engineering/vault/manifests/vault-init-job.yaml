apiVersion: batch/v1
kind: Job
metadata:
  name: vault-init
  namespace: vault
spec:
  template:
    spec:
      serviceAccountName: vault-init
      restartPolicy: OnFailure
      containers:
      - name: vault-init
        image: hashicorp/vault:1.15.2
        env:
        - name: VAULT_ADDR
          value: "http://vault:8200"
        - name: VAULT_SKIP_VERIFY
          value: "true"
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Waiting for Vault service to be available..."
          until nc -z vault 8200; do
            echo "Vault service not available, waiting..."
            sleep 5
          done
          
          echo "Checking Vault initialization status..."
          
          # Check if Vault is sealed (this works for both initialized and uninitialized vault)
          if vault status 2>/dev/null | grep -q "Sealed.*false"; then
            echo "Vault is already unsealed and ready"
            exit 0
          fi
          
          # Check if vault is initialized but sealed
          if vault status 2>/dev/null | grep -q "Initialized.*true"; then
            echo "Vault is initialized but sealed. Checking for existing unseal key..."
            
            # Try to get existing unseal key from secret
            if kubectl get secret vault-unseal-key -n vault >/dev/null 2>&1; then
              echo "Found existing unseal key, unsealing vault..."
              UNSEAL_KEY=$(kubectl get secret vault-unseal-key -n vault -o jsonpath='{.data.key}' | base64 -d)
              vault operator unseal "$UNSEAL_KEY"
              echo "Vault unsealed successfully!"
              exit 0
            else
              echo "No unseal key found. Vault was initialized externally."
              echo "Restarting vault pod to clear initialization state..."
              
              # Restart vault pod to clear state
              kubectl delete pod vault-0 -n vault
              
              # Wait for pod to restart
              echo "Waiting for vault pod to restart..."
              kubectl wait --for=condition=Ready pod/vault-0 -n vault --timeout=120s
              
              # Wait for vault service to be available again
              echo "Waiting for Vault service to be available after restart..."
              until nc -z vault 8200; do
                sleep 5
              done
              
              echo "Proceeding with fresh initialization after restart..."
            fi
          fi
          
          echo "Vault is not initialized. Initializing now..."
          vault operator init \
            -key-shares=1 \
            -key-threshold=1 \
            -format=json > /tmp/vault-init.json
          
          # Extract unseal key and root token
          UNSEAL_KEY=$(cat /tmp/vault-init.json | jq -r '.unseal_keys_b64[0]')
          ROOT_TOKEN=$(cat /tmp/vault-init.json | jq -r '.root_token')
          
          echo "Unsealing Vault..."
          vault operator unseal "$UNSEAL_KEY"
          
          echo "Storing credentials in Kubernetes secrets..."
          kubectl create secret generic vault-unseal-key \
            --from-literal=key="$UNSEAL_KEY" \
            --namespace=vault \
            --dry-run=client -o yaml | kubectl apply -f -
          
          kubectl create secret generic vault-root-token \
            --from-literal=token="$ROOT_TOKEN" \
            --namespace=vault \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "Vault initialization completed successfully!"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-init
  namespace: vault

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: vault-init
  namespace: vault

rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "patch", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vault-init
  namespace: vault

roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: vault-init
subjects:
- kind: ServiceAccount
  name: vault-init
  namespace: vault
