apiVersion: batch/v1
kind: Job
metadata:
  name: vault-init
  namespace: vault
spec:
  template:
    spec:
      serviceAccountName: vault-init
      restartPolicy: OnFailure
      containers:
      - name: vault-init
        image: docker.io/library/ubuntu:22.04
        env:
        - name: VAULT_ADDR
          value: "http://vault:8200"
        - name: VAULT_SKIP_VERIFY
          value: "true"
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          # Install required tools FIRST
          echo "Installing required tools..."
          apt-get update -qq || { echo "ERROR: apt-get update failed"; exit 1; }
          apt-get install -y -qq curl netcat-openbsd || { echo "ERROR: package installation failed"; exit 1; }
          
          # Install kubectl
          echo "Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" || { echo "ERROR: kubectl download failed"; exit 1; }
          chmod +x kubectl
          mv kubectl /usr/local/bin/
          
          echo "Tools installed successfully. Checking connectivity..."
          
          # Debug: check if vault service exists
          echo "Checking if vault service exists..."
          nslookup vault || echo "WARNING: vault DNS lookup failed"
          
          # Debug: check what's listening on port 8200
          echo "Checking vault service connectivity..."
          if nc -z vault 8200 2>/dev/null; then
            echo "Vault service is available on port 8200"
          else
            echo "ERROR: Cannot connect to vault:8200"
            echo "Debugging network connectivity:"
            ping -c 3 vault || echo "Ping to vault failed"
            nc -v vault 8200 || echo "Verbose netcat failed"
            exit 1
          fi
          
          echo "Checking Vault initialization status..."
          
          # Check vault status via API
          STATUS=$(curl -s http://vault:8200/v1/sys/health || echo '{"initialized":false,"sealed":true}')
          INITIALIZED=$(echo $STATUS | grep -o '"initialized":[^,}]*' | cut -d: -f2 | tr -d '"')
          SEALED=$(echo $STATUS | grep -o '"sealed":[^,}]*' | cut -d: -f2 | tr -d '"')
          
          echo "Vault status: initialized=$INITIALIZED, sealed=$SEALED"
          
          # If vault is unsealed, we're done
          if [ "$SEALED" = "false" ]; then
            echo "Vault is already unsealed and ready"
            exit 0
          fi
          
          # If vault is initialized but sealed, try to unseal
          if [ "$INITIALIZED" = "true" ]; then
            echo "Vault is initialized but sealed. Checking for existing unseal key..."
            
            if kubectl get secret vault-unseal-key -n vault >/dev/null 2>&1; then
              echo "Found existing unseal key, unsealing vault..."
              UNSEAL_KEY=$(kubectl get secret vault-unseal-key -n vault -o jsonpath='{.data.key}' | base64 -d)
              
              # Unseal via API
              UNSEAL_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d "{\"key\":\"$UNSEAL_KEY\"}" http://vault:8200/v1/sys/unseal 2>/dev/null)
              if echo $UNSEAL_RESPONSE | grep -q '"sealed":false'; then
                echo "Vault unsealed successfully!"
                exit 0
              else
                echo "Failed to unseal vault with stored key"
                exit 1
              fi
            else
              echo "No unseal key found. Vault was initialized externally."
              echo "Manual unsealing required: kubectl exec vault-0 -n vault -- vault operator unseal <key>"
              exit 1
            fi
          fi
          
          # Vault is not initialized, initialize it
          echo "Vault is not initialized. Initializing now..."
          INIT_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d '{"secret_shares":1,"secret_threshold":1}' http://vault:8200/v1/sys/init 2>/dev/null)
          
          if [ $? -ne 0 ]; then
            echo "Failed to initialize vault"
            exit 1
          fi
          
          # Extract keys from response
          UNSEAL_KEY=$(echo $INIT_RESPONSE | grep -o '"keys":\[[^]]*\]' | grep -o '"[^"]*"' | head -1 | tr -d '"')
          ROOT_TOKEN=$(echo $INIT_RESPONSE | grep -o '"root_token":"[^"]*"' | cut -d: -f2 | tr -d '"')
          
          echo "Unsealing Vault..."
          UNSEAL_RESPONSE=$(curl -s -X POST http://vault:8200/v1/sys/unseal -d "{\"key\":\"$UNSEAL_KEY\"}")
          
          if echo $UNSEAL_RESPONSE | grep -q '"sealed":false'; then
            echo "Vault unsealed successfully!"
          else
            echo "Failed to unseal vault after initialization"
            exit 1
          fi
          
          echo "Storing credentials in Kubernetes secrets..."
          kubectl create secret generic vault-unseal-key \
            --from-literal=key="$UNSEAL_KEY" \
            --namespace=vault \
            --dry-run=client -o yaml | kubectl apply -f -
          
          kubectl create secret generic vault-root-token \
            --from-literal=token="$ROOT_TOKEN" \
            --namespace=vault \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "Vault initialization completed successfully!"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-init
  namespace: vault

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: vault-init
  namespace: vault

rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "patch", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vault-init
  namespace: vault

roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: vault-init
subjects:
- kind: ServiceAccount
  name: vault-init
  namespace: vault
