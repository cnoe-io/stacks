apiVersion: batch/v1
kind: Job
metadata:
  name: vault-config
  namespace: vault
  annotations:
    # This hook ensures the job runs after the main sync, including after the init job
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      serviceAccountName: vault-config
      restartPolicy: OnFailure
      containers:
      - name: vault-config
        image: docker.io/library/ubuntu:22.04
        command: ["/bin/bash", "-c"]
        args:
        - |
          #!/bin/bash
          set -ex

          # Install required tools
          echo "Installing required tools..."
          apt-get update -qq
          apt-get install -y -qq --no-install-recommends curl wget jq ca-certificates gnupg lsb-release
          
          # Install kubectl
          echo "Installing kubectl..."
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /" | tee /etc/apt/sources.list.d/kubernetes.list
          apt-get update -qq
          apt-get install -y -qq kubectl
          
          # Install Vault CLI
          echo "Installing Vault CLI..."
          curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /etc/apt/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/etc/apt/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list
          apt-get update -qq
          apt-get install -y -qq vault

          # Wait for the root token to be available
          until kubectl get secret vault-root-token -n vault >/dev/null 2>&1; do
            echo "Waiting for vault-root-token secret to be created..."
            sleep 5
          done

          # Authenticate to Vault
          export VAULT_ADDR="http://vault:8200"
          set +x # Disable logging for this line
          export VAULT_TOKEN=$(kubectl get secret vault-root-token -n vault -o jsonpath='{.data.token}' | base64 -d)
          set -x # Re-enable logging

          # Enable KV v2 secrets engine (idempotent)
          echo "Enabling KV v2 secrets engine at path 'secret'..."
          vault secrets enable -path=secret kv-v2 || echo "Secrets engine 'secret' already enabled."

          # Create a secret at the desired path
          echo "Creating a sample secret at path 'secret/ai-platform-engineering/database'..."
          vault kv put secret/ai-platform-engineering/database username="db-user" password="super-secret-password-123"

          echo "Vault configuration complete."
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-config
  namespace: vault
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: vault-config
  namespace: vault
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vault-config
  namespace: vault
subjects:
- kind: ServiceAccount
  name: vault-config
  namespace: vault
roleRef:
  kind: Role
  name: vault-config
  apiGroup: rbac.authorization.k8s.io
