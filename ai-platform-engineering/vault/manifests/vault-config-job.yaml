apiVersion: batch/v1
kind: Job
metadata:
  name: vault-config
  namespace: vault
  annotations:
    # This hook ensures the job runs after the main sync, including after the init job
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      serviceAccountName: vault-config
      restartPolicy: OnFailure
      containers:
      - name: vault-config
        image: docker.io/library/ubuntu:22.04
        command: ["/bin/bash", "-c"]
        args:
        - |
          #!/bin/bash

          set -ex -o pipefail

          # Install required tools FIRST
          echo "Installing required tools..."
          apt-get update -qq || { echo "ERROR: apt-get update failed"; exit 1; }
          apt-get install -y -qq curl netcat-openbsd software-properties-common wget jq libcap2-bin || { echo "ERROR: package installation failed"; exit 1; }
          
          # Install Vault CLI
          echo "Installing Vault CLI..."
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor > /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" > /etc/apt/sources.list.d/hashicorp.list
          apt-get update
          apt-get install vault -y
          setcap cap_ipc_lock= /usr/bin/vault
          
          # Install kubectl
          echo "Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" || { echo "ERROR: kubectl download failed"; exit 1; }
          chmod +x kubectl
          mv kubectl /usr/local/bin/
          
          echo "Tools installed successfully. Checking connectivity..."

          # Wait for the root token to be available
          until kubectl get secret vault-root-token -n vault >/dev/null 2>&1; do
            echo "Waiting for vault-root-token secret to be created..."
            sleep 5
          done

          echo "Vault root token available. Authenticating..."
          # Authenticate to Vault
          export VAULT_ADDR="http://vault:8200"
          set +x # Disable logging for this line
          export VAULT_TOKEN=$(kubectl get secret vault-root-token -n vault -o jsonpath='{.data.token}' | base64 -d)
          set -x # Re-enable logging

          # Enable KV v2 secrets engine (idempotent)
          echo "Enabling KV v2 secrets engine at path 'secret'..."
          vault secrets enable -path=secret kv-v2 || echo "Secrets engine 'secret' already enabled."

          # Create a secret at the desired path
          echo "Creating a sample secret at path 'secret/ai-platform-engineering/database'..."
          vault kv put secret/ai-platform-engineering/database username="db-user" password="super-secret-password-123"

          echo "Vault configuration complete."
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-config
  namespace: vault
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: vault-config
  namespace: vault
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vault-config
  namespace: vault
subjects:
- kind: ServiceAccount
  name: vault-config
  namespace: vault
roleRef:
  kind: Role
  name: vault-config
  apiGroup: rbac.authorization.k8s.io
